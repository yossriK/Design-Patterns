we encapsulate method invocation

When you need to decouple an object making requests from the objects that know how to perform the requests, use the Command Pattern.: 

The Command Pattern allows you to decouple the requester of an action
from the object that actually performs the action. like remote controler being the invoker and light itself being the reciver.
Command: Encapsulates a request as an object, thereby lettign you parametrize clients with different requests, queue or log requests and support undoable operations


- The Command Pattern
decouples an object, making
a request from the one that
knows how to perform it.
- A Command object is at the
center of this decoupling and
encapsulates a receiver with
an action (or set of actions) .
- An invoker makes a request of
a Command object by calling
its execute() method, which
invokes those actions on the
receiver.
-  Invokers can be parameterized
with Commands, even
dynamically at runtime.
- Commands may support undo
by implementing an undo
method that restores the object
to its previous state before
the execute() method was last
called.
- Macro Commands are a simple
extension of Command that
allow multiple commands to
be invoked. Likewise, Macro
Commands can easily support
undo().
- In practice, it is not uncommon
for “smart” Command objects
to implement the request
themselves rather than
delegating to a receiver.
- Commands may also be used
to implement logging and
transactional systems.


Depend on abstractions. Do not depend on concrete classes


*****
The NoCommand(like empty command where the methods are just empty so no execution0 object is an example of a null object. A null object is useful
when you don’t have a meaningful object to return, and yet you want to remove
the responsibility for handling null from the client. For instance, in our remote
control we didn’t have a meaningful object to assign to each slot out of the box,
so we provided a NoCommand object that acts as a surrogate and does nothing
when its execute method is called.
You’ll find uses for Null Objects in conjunction with many Design Patterns and
sometimes you’ll even see Null Object listed as a Design Pattern.
*******